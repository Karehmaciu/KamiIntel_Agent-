from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.chart import XL_CHART_TYPE
from pptx.chart.data import CategoryChartData
from pptx.dml.color import RGBColor
from docx import Document
from datetime import datetime
import os
import requests

def save_prompt_and_response(prompt, response):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    with open(f"chat_data/prompts/{timestamp}.txt", "w", encoding="utf-8") as f:
        f.write(prompt)
    with open(f"chat_data/responses/{timestamp}.txt", "w", encoding="utf-8") as f:
        f.write(response)

def export_to_word(prompt, response):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"chat_data/logs/chat_{timestamp}.docx"
    doc = Document()
    doc.add_heading("Chat Summary", 0)
    doc.add_paragraph("Prompt:")
    doc.add_paragraph(prompt)
    doc.add_paragraph("\nResponse:")
    doc.add_paragraph(response)
    doc.save(filename)
    return filename

def download_image_from_url(url, save_path="temp_image.jpg"):
    response = requests.get(url)
    with open(save_path, "wb") as f:
        f.write(response.content)
    return save_path

def generate_pptx_slides_from_text(text, topic, save_path):
    from pptx import Presentation
    from pptx.util import Inches, Pt

    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide_layout = prs.slide_layouts[1]

    # Title slide
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = topic
    slide.placeholders[1].text = "Generated by KamiIntel Agent"

    # Content slides
    for block in text.strip().split("\n\n"):
        if ":" in block:
            title, content = block.split(":", 1)
            slide = prs.slides.add_slide(slide_layout)
            slide.shapes.title.text = title.strip()
            slide.placeholders[1].text = content.strip()

    prs.save(save_path)



def generate_pptx_advanced(content, topic, save_path, image_path=None, image_url=None, chart_input=None, theme_color=(255, 255, 255), text_color=(40, 40, 80), max_slides=None, language="en"):
    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    bullet_slide_layout = prs.slide_layouts[1]
    blank_slide_layout = prs.slide_layouts[6]

    # Determine language labels
    is_sw = language == "sw"
    by_label = "Imetolewa na KamiIntel Agent" if is_sw else "Generated by KamiIntel Agent"
    part_label = "Sehemu ya" if is_sw else "Part"
    notes_label = "Maelezo ya Mzungumzaji kwa" if is_sw else "Speaker Notes for"
    chart_title = "Muhtasari wa Chati" if is_sw else "Chart Overview"

    # Title Slide
    title_slide = prs.slides.add_slide(title_slide_layout)
    title_slide.shapes.title.text = topic.title()[:60]
    title_slide.placeholders[1].text = by_label

    # Parse bullet content
    bullets = []
    for line in content.strip().split("\n"):
        if line.strip() and (line.startswith("-") or line[0].isdigit() or "‚Ä¢" in line):
            bullets.append(line.strip("-‚Ä¢ ").strip())

    print(f"üîç Total bullet points parsed: {len(bullets)}")

    bullets_per_slide = 6
    if max_slides:
        bullets = bullets[:max_slides * bullets_per_slide]

    slide_chunks = [bullets[i:i + bullets_per_slide] for i in range(0, len(bullets), bullets_per_slide)]
    clean_title = topic.split(".")[0].strip()[:50]

    for i, chunk in enumerate(slide_chunks):
        slide = prs.slides.add_slide(bullet_slide_layout)
        slide.shapes.title.text = f"{clean_title} - {part_label} {i + 1}"
        tf = slide.placeholders[1].text_frame
        tf.clear()
        for j, bullet in enumerate(chunk):
            para = tf.add_paragraph()
            para.text = f"üîπ {bullet}"
            para.level = 0 if j < 4 else 1
            para.font.size = Pt(14)
            para.font.color.rgb = RGBColor(*text_color)

        # Speaker notes
        notes_slide = slide.notes_slide
        notes_slide.notes_text_frame.text = f"{notes_label} {part_label} {i + 1}:\n" + "\n".join(chunk)

    # Chart Slide
    if chart_input:
        try:
            lines = chart_input.strip().split("\n")
            categories = []
            values = []
            for line in lines:
                if ":" in line:
                    label, val = line.split(":")
                    categories.append(label.strip())
                    values.append(float(val.strip()))

            chart_slide = prs.slides.add_slide(prs.slide_layouts[5])
            chart_slide.shapes.title.text = chart_title
            chart_data = CategoryChartData()
            chart_data.categories = categories
            chart_data.add_series("Data", tuple(values))

            x, y, cx, cy = Inches(1), Inches(1.5), Inches(8), Inches(4)
            chart_slide.shapes.add_chart(
                XL_CHART_TYPE.COLUMN_CLUSTERED, x, y, cx, cy, chart_data
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Chart creation failed: {e}")

    # Image Slide
    try:
        if image_path and os.path.exists(image_path):
            img_slide = prs.slides.add_slide(blank_slide_layout)
            img_slide.shapes.add_picture(image_path, Inches(1), Inches(1), width=Inches(7.5))
        elif image_url:
            img_temp = download_image_from_url(image_url)
            img_slide = prs.slides.add_slide(blank_slide_layout)
            img_slide.shapes.add_picture(img_temp, Inches(1), Inches(1), width=Inches(7.5))
            os.remove(img_temp)
    except Exception as e:
        print(f"‚ö†Ô∏è Image load failed: {e}")

    # Background color
    for slide in prs.slides:
        fill = slide.background.fill
        fill.solid()
        fill.fore_color.rgb = RGBColor(*theme_color)

    prs.save(save_path)
    return save_path
